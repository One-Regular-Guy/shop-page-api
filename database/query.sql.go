// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, username, email, password)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Name     string
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	return err
}

const getPassword = `-- name: GetPassword :one
SELECT password FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetPassword(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getPassword, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, username FROM users
WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID       pgtype.UUID
	Name     string
	Username string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Name, &i.Username)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT name, username, email FROM users
WHERE id = $1 LIMIT 1
`

type GetUserByIdRow struct {
	Name     string
	Username string
	Email    string
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.Name, &i.Username, &i.Email)
	return i, err
}

const getUsername = `-- name: GetUsername :one
SELECT username FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getUsername, username)
	err := row.Scan(&username)
	return username, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
    name = $1,
    username = $2,
    email = $3,
    password = $4
WHERE id = $5
`

type UpdateUserParams struct {
	Name     string
	Username string
	Email    string
	Password string
	ID       pgtype.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}
